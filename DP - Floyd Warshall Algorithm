//Floyd Warshall Algorithm
#include <bits/stdc++.h>
using namespace std;

const int INF = INT_MAX; // Represents infinity

void floydWarshall(vector<vector<int>>& graph, int V) {
    vector<vector<int>> dist(V, vector<int>(V));

    // Initialize distance matrix with input graph
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            dist[i][j] = graph[i][j];
        }
    }

    // Update distance matrix by considering all vertices as intermediates
    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (dist[i][k] != INF && dist[k][j] != INF &&
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the final distance matrix
    cout << "Shortest distances between all pairs of vertices:\n";
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            if (dist[i][j] == INF)
                cout << "INF ";
            else
                cout << dist[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    // Initialize the graph adjacency matrix with INF values
    vector<vector<int>> graph(V, vector<int>(V, INF));

    // Input edges and their weights
    cout << "Enter edges and their weights (src dest weight):\n";
    for (int i = 0; i < V; ++i) {
        graph[i][i] = 0; // Initialize the diagonal with 0 (not INF)
    }
    for (int i = 0; i < E; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u][v] = w;
    }

    floydWarshall(graph, V);

    return 0;
}



/*
4 7
0 1 3
0 3 7
1 0 8
1 2 2
2 0 5
2 3 1
3 0 2
*/
