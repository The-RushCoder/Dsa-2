//0-1 knapsack
#include <bits/stdc++.h>
using namespace std;

struct Item {
    int value;
    int weight;
};

bool compareItems(const Item& a, const Item& b) {
    // Sort in non-increasing order of value-to-weight ratio
    return (double)a.value / a.weight > (double)b.value / b.weight;
}

int knapsack01(int capacity, const vector<Item>& items) {
    int n = items.size();
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= capacity; ++w) {
            if (items[i - 1].weight <= w) {
                dp[i][w] = max(dp[i - 1][w], items[i - 1].value + dp[i - 1][w - items[i - 1].weight]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][capacity];
}

int main() {
    int numItems, capacity;
    cout << "Enter the number of items: ";
    cin >> numItems;

    vector<Item> items(numItems);

    cout << "Enter the value and weight of each item:" << endl;
    for (int i = 0; i < numItems; ++i) {
        cin >> items[i].value >> items[i].weight;
    }

    cout << "Enter the knapsack capacity: ";
    cin >> capacity;

    sort(items.begin(), items.end(), compareItems);

    int maxValue = knapsack01(capacity, items);

    cout << "Maximum value that can be obtained: " << maxValue << endl;

    return 0;
}
