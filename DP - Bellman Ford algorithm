//Bellman Ford algorithm
#include <bits/stdc++.h>
using namespace std;


struct Edge {
    int source, destination, weight;
};

void BellmanFord(vector<Edge>& edges, int numVertices, int source) {
    vector<int> distance(numVertices, INT_MAX);
    distance[source] = 0;

    for (int i = 1; i < numVertices; ++i) {
        for (const Edge& edge : edges) {
            int u = edge.source;
            int v = edge.destination;
            int w = edge.weight;

            if (distance[u] != INT_MAX && distance[u] + w < distance[v]) {
                distance[v] = distance[u] + w;
            }
        }
    }

    // Check for negative weight cycles
    for (const Edge& edge : edges) {
        int u = edge.source;
        int v = edge.destination;
        int w = edge.weight;

        if (distance[u] != INT_MAX && distance[u] + w < distance[v]) {
            cout << "Graph contains a negative weight cycle" << endl;
            return;
        }
    }

    // Print the shortest distances
    cout << "Vertex\tDistance from Source" << endl;
    for (int i = 0; i < numVertices; ++i) {
        cout << i << "\t" << distance[i] << endl;
    }
}

int main() {
    int numVertices, numEdges;
    cout << "Enter the number of vertices and edges: ";
    cin >> numVertices >> numEdges;

    vector<Edge> edges(numEdges);
    cout << "Enter the edges in the format (source, destination, weight):" << endl;
    for (int i = 0; i < numEdges; ++i) {
        cin >> edges[i].source >> edges[i].destination >> edges[i].weight;
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    BellmanFord(edges, numVertices, source);

    return 0;
}


/*
6 10
1 0 2
1 3 1
0 2 8
3 4 5
2 3 -6
2 4 4
3 5 -3
4 5 -5
5 1 5
0 3 3
1
*/
