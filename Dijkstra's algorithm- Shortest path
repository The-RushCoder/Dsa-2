//Dijkstra's algorithm
//Shortest path
#include <bits/stdc++.h>
using namespace std;
const int inf = 1e7;


vector<int> dijkstra(const vector<vector<pair<int, int>>>& graph, int source, int num_vertices) {
    vector<int> dist(num_vertices + 1, inf);
    set<pair<int, int>> seT;

    dist[source] = 0;
    seT.insert({0, source});

    while (!seT.empty()) {
        auto x = *(seT.begin());
        seT.erase(x);

        for (auto it : graph[x.second]) {
            if (dist[it.first] > dist[x.second] + it.second) {
                seT.erase({dist[it.first], it.first});
                dist[it.first] = dist[x.second] + it.second;
                seT.insert({dist[it.first], it.first});
            }
        }
    }

    return dist;
}

int main() {
    int ver, ed, source;
    printf("Enter the number of vertices and edges: ");
    cin >> ver >> ed;

    vector<vector<pair<int, int>>> graph(ver + 1);

    printf("\nEnter the edges in the format: 'from to weight'\n");
    for (int i = 0; i < ed; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w}); //if the graph is directed then remove only this line
    }

    printf("Enter the source vertex: ");
    cin >> source;

    vector<int> shortest_distances = dijkstra(graph, source, ver);

    for (int i = 0; i < ver; i++) {
        if (shortest_distances[i] < inf) {
            cout << shortest_distances[i] << " ";
        } else {
            cout << -1 << " ";
        }
    }

    return 0;
}
/*
6 9
0 1 4
0 2 1
1 2 2
1 3 5
2 3 2
2 4 1
3 4 3
3 5 7
4 5 2
0
*/














// minimum time it takes for all the n nodes to receive the signal.
#include <bits/stdc++.h>
using namespace std;

const int inf = 1e7;

int networkDelayTime(vector<vector<pair<int, int>>>& graph, int n, int k) {
    vector<int> dist(n + 1, inf);
    dist[k] = 0;
    set<pair<int, int>> pq;
    pq.insert({0, k});

    while (!pq.empty()) {
        auto [time, node] = *(pq.begin());
        pq.erase(pq.begin());

        for (auto& neighbor : graph[node]) {
            int v = neighbor.first;
            int w = neighbor.second;
            if (dist[v] > dist[node] + w) {
                pq.erase({dist[v], v});
                dist[v] = dist[node] + w;
                pq.insert({dist[v], v});
            }
        }
    }

    int maxTime = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == inf) return -1; // There's a disconnected node
        maxTime = max(maxTime, dist[i]);
    }

    return maxTime;
}

int main() {
    int n, edges, source;
    printf("Enter the number of vertices and edges: ");
    cin >> n >> edges;

    vector<vector<pair<int, int>>> graph(n + 1);

    printf("\nEnter the edges in the format: 'from to weight'\n");
    for (int i = 0; i < edges; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        // If the graph is directed, keep the line above; otherwise, remove it.
    }

    printf("Enter the source vertex: ");
    cin >> source;

    int minTime = networkDelayTime(graph, n, source);

    cout << "Minimum time for all nodes to receive signal: " << minTime << endl;

    return 0;
}








#include <bits/stdc++.h>
using namespace std;

const double inf = 1e7; // Change the type to double for probability
const double EPS = 1e-5; // Define a small epsilon value for floating-point comparisons

vector<double> dijkstra(const vector<vector<pair<int, double>>>& graph, int source, int num_vertices) {
    vector<double> prob(num_vertices, 0.0);
    prob[source] = 1.0; // Probability of starting node is 1.0

    priority_queue<pair<double, int>> pq;
    pq.push({1.0, source});

    while (!pq.empty()) {
        auto current = pq.top();
        pq.pop();

        double current_prob = current.first;
        int node = current.second;

        if (current_prob < prob[node] - EPS) {
            continue; // Skip outdated entries
        }

        for (auto neighbor : graph[node]) {
            int next_node = neighbor.first;
            double edge_prob = neighbor.second;
            double new_prob = current_prob * edge_prob;

            if (new_prob > prob[next_node] + EPS) {
                prob[next_node] = new_prob;
                pq.push({new_prob, next_node});
            }
        }
    }

    return prob;
}

int main() {
    int ver, ed, start, end;
    printf("Enter the number of vertices and edges: ");
    cin >> ver >> ed;

    vector<vector<pair<int, double>>> graph(ver);

    printf("\nEnter the edges in the format: 'from to probability'\n");
    for (int i = 0; i < ed; i++) {
        int u, v;
        double p;
        cin >> u >> v >> p;
        graph[u].push_back({v, p});
        graph[v].push_back({u, p}); // Undirected graph
    }

    printf("Enter the start and end vertices: ");
    cin >> start >> end;

    vector<double> max_probs = dijkstra(graph, start, ver);
    double max_prob = max_probs[end];

    if (max_prob < EPS) {
        cout << "No path from start to end.\n";
    } else {
        cout << "Maximum success probability: " << fixed << setprecision(5) << max_prob << "\n";
    }

    return 0;
}


