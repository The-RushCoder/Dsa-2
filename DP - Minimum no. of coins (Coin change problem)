//DP Minimum number of coins (Type - 1)
#include <bits/stdc++.h>
using namespace std;

int minCoins(int coins[], int n, int amount) {
    int mCoin[n + 1][amount + 1];

    for (int i = 0; i <= n; i++)
        mCoin[i][0] = 0;

    for (int i = 1; i <= amount; i++)
        mCoin[0][i] = INT_MAX;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= amount; j++) {
            if (coins[i - 1] > j)
                mCoin[i][j] = mCoin[i - 1][j];
            else
                mCoin[i][j] = min(mCoin[i - 1][j], 1 + mCoin[i][j - coins[i - 1]]);
        }
    }

    return mCoin[n][amount];
}

int main() {
    int n;
    cout << "Enter the number of coins: ";
    cin >> n;

    int coins[n];
    for (int i = 0; i < n; i++) {
        cout << "Enter the number of coin " << i + 1 << ": ";
        cin >> coins[i];
    }

    int amount;
    cout << "Enter the target amount: ";
    cin >> amount;

    int min_num_coins = minCoins(coins, n, amount);

    cout << "Minimum number of coins required: " << min_num_coins << endl;

    return 0;
}




//DP Minimum number of coins (Type - 2)
#include<bits/stdc++.h>
using namespace std;

int minCoins(int coins[], int n, int amount) {
    int mCoin[amount + 1];
    mCoin[0] = 0;

    for (int i = 1; i <= amount; i++)
    {
        mCoin[i] = INT_MAX;
    }

    for (int i = 1; i <= amount; i++) {
        for (int j = 0; j < n; j++) {
            if (coins[j] <= i) {
                int sub_res = mCoin[i - coins[j]];
                if (sub_res != INT_MAX && sub_res + 1 < mCoin[i])
                    mCoin[i] = sub_res + 1;
            }
        }
    }

    return mCoin[amount];
}

int main()
{
    int n;
    printf("Enter the number of coins: ");
    cin >> n;

    int coins[n];
    for(int i=0; i<n; i++)
    {
        printf("Enter the number of coin %d: ", i+1);
        cin >> coins[i];
    }

    int amount; 
    printf("Enter the target amount: ");
    cin >> amount;

    int min_num_coins = minCoins(coins, n, amount);

    cout << "Minimum number of coins required: " << min_num_coins << endl;

    return 0;
}
