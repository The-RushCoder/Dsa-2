//Prims Algoritham
#include <bits/stdc++.h>
using namespace std;
const int inf = 1e7;

void prims(const vector<vector<pair<int, int>>>& graph, int source, int num_vertices)
{
    vector<int> dist(num_vertices + 1, inf);
    vector<bool> vis(num_vertices + 1, false);
    vector<int> parent(num_vertices + 1, -1);
    set<pair<int, int>> seT;

    dist[source] = 0;
    seT.insert({0, source});

    int cost = 0;

    while (!seT.empty()) {
        auto x = *(seT.begin());
        seT.erase(x);

        vis[x.second] = true;

        int u = x.second;
        int v = parent[x.second];
        int w = x.first;

        cout << u << " " << v << " " << w << "\n";
        cost += w;

        for (auto it : graph[x.second])
        {
            if (vis[it.first])
                continue;
            if (dist[it.first] > it.second)
            {
                seT.erase({dist[it.first], it.first});
                dist[it.first] = it.second;
                seT.insert({dist[it.first], it.first});
                parent[it.first] = x.second;
            }
        }
    }
}

int main()
{
    int ver, ed, source;
    printf("Enter the number of vertices and edges: ");
    cin >> ver >> ed;

    vector<vector<pair<int, int>>> graph(ver + 1);

    printf("\nEnter the edges in the format: 'from to weight'\n");
    for (int i = 0; i < ed; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});
    }

    printf("Enter the source vertex: ");
    cin >> source;

    //vector<int> prims_MST = prims(graph, source, ver);
    prims(graph, source, ver);

    return 0;
}
/*
4 5
0 1 2
0 2 3
1 2 1
1 3 4
2 3 5
0
*/
